# -*- coding: utf-8 -*-
"""
Created on Wed Sep  9 11:54:15 2020

@author: Cole
"""
import numpy as np
import csv

def readFile():
    list = []
    with open("C:\\Users\\Cole\\Documents\\SEMO\\Fall2020\\CS453\\SP500.csv") as file:
        reader = csv.reader(file)
        header_row = next(reader)
        for row in reader:
            list.append(row)
    return list

def highestValue(array, column):
    highestValueArray = array[:, column].astype(float)
    highnum = np.amax(highestValueArray)
    index_of_high_num = np.where(highestValueArray == highnum)
    row_of_highestValue = array[int(index_of_high_num[0]), :]
    return (row_of_highestValue[0], highnum)

def averageReport(array, date1, date2):

    dates_by_year_index = findIndexes(array, date1, date2)
    dates_by_year = array[dates_by_year_index, 0]
    
    monthlyAverage(dates_by_year, "Open Price", array[dates_by_year_index, 1].astype(float))
    monthlyAverage(dates_by_year, "Close Price" ,array[dates_by_year_index, 4].astype(float))
    monthlyAverage(dates_by_year, "High", array[dates_by_year_index, 2].astype(float))
    monthlyAverage(dates_by_year, "Low", array[dates_by_year_index, 3].astype(float))
    monthlyAverage(dates_by_year, "Volume", array[dates_by_year_index, 6].astype(float))
    
    yearlyAverage(array, "Open Prices",array[:, 1].astype(float))
    yearlyAverage(array, "Close Prices", array[:, 4].astype(float))
    yearlyAverage(array, "High ", array[:, 2].astype(float))
    yearlyAverage(array, "Low ", array[:, 3].astype(float))
    yearlyAverage(array, "Volume ", array[:, 6].astype(float))
    
    average5year(array, "Open Prices", array[:, 1].astype(float))
    average5year(array, "Close Prices", array[:, 4].astype(float))
    average5year(array, "High ", array[:, 2].astype(float))
    average5year(array, "Low ", array[:, 3].astype(float))
    average5year(array, "Volume ", array[:, 6].astype(float))
    
def monthlyAverage(dates,string, values):
    print( string, " Average by Month: ")
    print("Month/Year      Average")
    count = 1
    month = 0
    value = 0
    for date in dates:
        tempstr = date.split('/')
        if tempstr[0] == str(month) and month != 0:
            value += values[np.where(dates == date)]
            count += 1
        else:
            if month !=0:
                print(tempstr[0] +"/" +tempstr[2] +"     ", float(value/count))
            
            value = values[np.where(dates == date)]
            count = 1
            month = tempstr[0]
    print(tempstr[0]+'/'+tempstr[2]+"     ", float(value/count))
    print('\n')

def findIndexes(array, date1, date2):
    dates = array[:, 0]
    date1_index = np.where(dates == date1)
    date2_index = np.where(dates == date2)
    dates_by_year_index = np.arange(int(date1_index[0]), int(date2_index[0]))
    return dates_by_year_index

def yearlyAverage(array,string, values):
    print( string, "Averages by Year: ")
    print("Year       Average")
    dates = array[:, 0]
    count = 1
    year = 1949
    value = 0
    for date in dates:
        tempstr = date.split('/')
       
        if tempstr[2] == str(year):
            value += values[np.where(dates == date)]
            count += 1
        else:
            if int(year) >= 1950:
                average = float(value/count)
                year = int(tempstr[2])
                result = year-1
                print(str(result) +"    ", average)
            value = values[np.where(dates == date)]
            count = 1
            year = tempstr[2]
    average = float(value/count)
    year = int(tempstr[2])
    result = year
    print(str(result) +"    ", average)
    print('\n')

def average5year(array, string, values):
    print(string, " Average Every 5 years")
    print("Year         Average")
    dates = array[:, 0]   
    thisDate = dates[0]
    currentYear = int(thisDate.split('/')[2])
    yearNbr = 1
    tally = values[np.where(dates == thisDate)]
    count = 1
    for thisDate in dates:    
        thisYear = int(thisDate.split('/')[2])
        thisValue = values[np.where(dates == thisDate)]
        if thisYear != currentYear:
            yearNbr += 1
            currentYear = thisYear
            if yearNbr == 6:
                average = float(tally/count)
                year = thisYear-yearNbr + 1
                print(str(year),"    ", average)                
                tally = thisValue    
                count = 1
                yearNbr = 1
            else:
                tally += thisValue
                count += 1
        else:
            tally += thisValue
            count += 1
    average = float(tally/count)
    year = currentYear-yearNbr+1
    print(str(year) + "    ", average, "\n")          
    
                
def main():
        
        arr2d = np.array(readFile())
        highestGain = highestValue(arr2d, 2)
        print("Date of highest gain: ", highestGain[0],
              "\nHighest gain value: ", highestGain[1])
        print("\n")
        highestLoss = highestValue(arr2d, 3)
        print("Date of highest loss: ", highestLoss[0],
              "\nHighest loss value: ", highestLoss[1])
        print("\n")
        highestVolume = highestValue(arr2d, 6)
        print("Date of highest volume: ", highestVolume[0],
              "\nhighest volume value: ", int(highestVolume[1]), "\n")
        
        averageReport(arr2d, '1/3/2017', '4/27/2018')
if __name__ == "__main__":
    main()
